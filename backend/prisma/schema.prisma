generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String
  users     User[]
  brigades  Brigade[]
  shifts    Shift[]
  createdAt DateTime  @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role
  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])
  brigadeId Int?
  brigade   Brigade? @relation(fields: [brigadeId], references: [id])
  shifts    Shift[]  @relation("UserShifts")
  expoPushToken String?
  createdAt DateTime @default(now())
}

model Brigade {
  id        Int     @id @default(autoincrement())
  name      String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  users  User[]
  shifts Shift[]
}

model Shift {
  id        Int             @id @default(autoincrement())
  userId    Int
  user      User            @relation("UserShifts", fields: [userId], references: [id], onDelete: Cascade)
  companyId Int
  company   Company         @relation(fields: [companyId], references: [id])
  brigadeId Int?
  brigade   Brigade?        @relation(fields: [brigadeId], references: [id])
  locations ShiftLocation[]
  status     String   @default("active")
  startedAt DateTime
  endedAt   DateTime?
  durationHours Float?
}

model ShiftLocation {
  id        Int      @id @default(autoincrement())
  shiftId   Int
  shift     Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
}

enum Role {
  SUPER_ADMIN
  ADMIN
  WORKER
}
